
To switch to the database Products
use Products

To show databases present in the database
show dbs

To show collections present in the database
show collections

To create a collection in the database
db.createCollection("collectionname")

To drop the database
db.dropDatabase() 

To drop the collection present in the database
db.collectionname.drop() 
*/
//files adding command

To show data present in the collection
db.collectionname.find()       

To insert one data in the Collection
db.collectionname.insertOne({
    name:'JSR',
    age:'20',
    rollno:'1234',
})

db.collectionname.insertOne({
    name:'Jitendra',
})


db.collectionname.insertOne({
    name:'J',
    age:'20',
    rollno:'1234',
},{
    name:'S',
    age:'21',
    rollno:'2345',
}
)          // by this only first one is added not both

To insert more than one data in the Collection
db.collectionname.insertMany([{
    name:'JS',
    age:'20',
    rollno:'1234',
},{
    name:'SR',
    age:'21',
    rollno:'2345',
}]
) 


in the data.json to find the brand appple
use products
then db.electronics.find({brand:'Apple'})

to show prices of data with brand as apple

db.electronics.find({brand:'Apple'},{price:1})
  { _id: ObjectId("64f5c04afffd57dc25da1231"), price: 549 },
  { _id: ObjectId("64f5c04afffd57dc25da1232"), price: 899 },
  { _id: ObjectId("64f5c04afffd57dc25da1236"), price: 1749 }

db.electronics.find({brand:'Apple'},{_id:0,price:1})
{ price: 549 }, { price: 899 }, { price: 1749 }

to count the no. of apple brands
db.electronics.find({brand:'Apple'}).count()


Questions to do:-
1. 15% se jyada discount waalo ka title price brands

db.electronics.find({discountPercentage:{$gt:15}})   // can also be written as db.electronics.find({"discountPercentage":{$gt:15}})

2. jinka category laptop unko print karna

db.electronics.find({category:'laptops'})

3. 5 products ko iss tarah se ki highest discount waala highest par

db.electronics.find().sort({discountPercentage:-1}).limit(5)   // -1 is for descending order i.e. highest to lowest and limit is for providing the 5 results and if we write 1 we get ascending results nad 0 gives invalid sort order





** comparison operators:

$eq:-  equalss to
$neq:-  not equals to
$gt:-   greater than
$gte:-  greater than equals to
$lt:-  less than
$lte:-  less than equals to
$in:-  inside
$nin:-  not inside



* to show those have price = 60, 20, 80

=>db.electronics.find({price:{$in:[60,20,80]}})

* to show those not have price = 60, 20, 80

=>db.electronics.find({price:{$nin:[60,20,80]}})

** cursor methods

count()
limit()
skip()
sort()  1 for ascending and -1 for descending

* 5 data price is greater than 250 
=>db.electronics.find({price:{$gt:250}}).sort({price:-1}) // for all
=>db.electronics.find({price:{$gt:250}}).limit(5) // show those in order of the id ascending
=>db.electronics.find({price:{$gt:250}}).sort({price:-1}).limit(5) // for top 5

* shuruat ke 2 data ko skip karna
=>db.electronics.find().skip(2)          // now of the 30 data first 2 are skipped and from 3rd will be shown  i.e 28 datas


* woh saari price greater than 100 and brand is apple
=>db.electronics.find({price:{$gt:100},brand:"Apple"})

* price is 100 or 200 
=>db.electronics.find({price:{$in:[100,200]}})

* what is average price of all data
=>db.electronics.aggregate([
    {
        $group: {
            _id: null,
            averagePrice: { $avg: "$price" }
        }
    }
])

* price between 30 to 50
=>db.electronics.find({price:{$gt:30,$lt:50}})


** Logical Operators

$,,& is called stages 
$and:- and
$or:- or
$not:- not
$nor:- nor

* to show those whose price is greater than 900 and rating is greater than 4
=>db.electronics.find({$and:[{price:{$gt:900}},{rating:{$gt:4}}]})


** to delete the data

db.electronics.deleteOne({brand:"Apple"})
db.electronics.deleteMany({brand:"Apple"})

db.electronics.deleteOne({price:{$gte:900}})
db.electronics.deleteMany({price:{$gte:900}})


** Element operators

$exists
Eg. if the price exists than find there count
db.electronics.find({price:{$exists:true}}).count()
ques- 1250 waali price exist nahi karti unko print karo
db.electronics.find({$and:[{price:{$exists:true}},{price:{$gte:1250}}]}).count()
db.electronics.find({$and:[{price:{$exists:false}},{price:{$gte:1250}}]}).count()

$type
Eg. if you have accidentally put the price as "50" instead of price as 50
db.electronics.find({price:{$type:'string'}}).count() //0
db.electronics.find({price:{$type:'number'}}).count() //30
db.electronics.find({images:{$type:'string'}}).count() //30

$size
Eg. 




* to show the prouduct with id as 5
=>db.electronics.find({id:5})

* to show the prouduct with _id
=>db.electronics.find({_id:ObjectId("64f5c04afffd57dc25da1235")})

* list all the products from laptops category
=>db.electronics.find({category:"laptops"})

*retrieve price title and price of discountPercentage items greater than 15%
=> db.electronics.find({discountPercentage:{$gte:15}},{title:1,price:1,_id:0})              // infind({},{}) first is for filter and second one is for projection and in query 0 for off and 1 for on

* how many brands with Samsung brand
=>db.electronics.find({brand:"Samsung"}).count()

* how many brands with , with category smartphones
=> db.electronics.find({$and:[{category:"smartphones"},{rating:{$gte:4.5}}]})

* which brands have products in the fragrances category
=> db.electronics.find({category:"fragrances"},{brand:1,_id:0}) // it will show brand key also
[
    { brand: 'Impression of Acqua Di Gio' },
    { brand: 'Royal_Mirage' },
    { brand: 'Fog Scent Xpressio' },
    { brand: 'Al Munakh' },
    { brand: 'Lord - Al-Rehab' }
  ]
  
=> db.electronics.distinct("brand",{category:"fragrances"}) // it will also not show brand key
[
    'Al Munakh',
    'Fog Scent Xpressio',
    'Impression of Acqua Di Gio',
    'Lord - Al-Rehab',
    'Royal_Mirage'
  ]



**ques

*which brand has products in fragrances category show those products
=>db.electronics.find({category:'fragrances'},{title:1,price:1,_id:0})

* show all the products in range of price between 1240 to 2000
=>db.electronics.find({price:{$gt:1240,$lt:2000}})

* stock quantity less than 50
=>db.electronics.find({price:{$lt:50}})

* show me product where rating is greater than 4 and stock quantity less than 100
=> db.electronics.find({rating:{$gt:4},stockQuantity:{$lt:100}})

* calculate the average discountPercentage for each brand
=>db.electronics.aggregate([
    {
        $group: {
            _id: "$brand",
            averageDiscountPercentage: { $avg: "$discountPercentage" }
        }
    }
    ])
    


* if i want to show only the title and price from database collection
db.electronics.find({},{title:1,price:1,_id:0})

 mongoose and mongodb are different
  first node then mongoose 